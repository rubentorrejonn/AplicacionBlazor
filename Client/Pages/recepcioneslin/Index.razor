@page "/recepcioneslin"
@using UltimateProyect.Shared.Models
@using UltimateProyect.Client.Services
@inject HttpClient Http
@inject RecepcionService RecepcionService
@inject IJSRuntime JSRuntime
@inject NavigationManager Nav

<h3>Líneas de Recepción - Albarán @RecepcionService.CurrentAlbaran</h3>

@if (!RecepcionService.CurrentAlbaran.HasValue)
{
    <div class="alert alert-warning">
        Seleccione un albarán desde la lista de recepciones.
    </div>
}
else
{
    <!-- Carrito -->
    @if (RecepcionService.Carrito.Any())
    {
        <h4>Carrito (@RecepcionService.Carrito.Values.Sum(x => x.Cantidad) unidades)</h4>
        <table class="table table-sm table-bordered">
            <thead>
                <tr>
                    <th>Referencia</th>
                    <th>Descripción</th>
                    <th>Cantidad</th>
                    <th>Bien</th>
                    <th>Mal</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in RecepcionService.Carrito.Values)
                {
                    <tr>
                        <td>@item.Referencia</td>
                        <td>@item.DesReferencia</td>
                        <td>
                            <InputNumber @bind-Value="item.Cantidad" class="form-control form-control-sm" />
                        </td>
                        <td>
                            <InputNumber @bind-Value="item.Bien" class="form-control form-control-sm" />
                        </td>
                        <td>
                            <InputNumber @bind-Value="item.Mal" class="form-control form-control-sm" />
                        </td>
                        <td>
                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveFromCarrito(item.Referencia)">
                                Eliminar
                            </button>
                        </td>
                    </tr>

                    @if (item.RequiereNSerie)
                    {
                        <tr class="table-light">
                            <td colspan="6">
                                <h6>
                                    Números de serie para @item.Referencia
                                    @if (item.LongNSerie.HasValue)
                                    {
                                        <small class="text-muted"> (longitud esperada: @item.LongNSerie)</small>
                                    }
                                </h6>

                                @if (item.Bien > 0)
                                {
                                    <div class="mb-2">
                                        <label>Bien (@item.Bien unidades):</label>
                                        <textarea value="@nsBienInputs.GetValueOrDefault(item.Referencia, "")"
                                        @oninput="(e) => nsBienInputs[item.Referencia] = e.Value?.ToString() ?? string.Empty"
                                        class="form-control"
                                        rows="@(Math.Max(2, (item.Bien ?? 0) / 3))"
                                        placeholder="Separe con comas o saltos de línea">
                                        </textarea>
                                    </div>
                                }

                                @if (item.Mal > 0)
                                {
                                    <div class="mb-2">
                                        <label>Mal (@item.Mal unidades):</label>
                                        <textarea value="@nsMalInputs.GetValueOrDefault(item.Referencia, "")"
                                        @oninput="(e) => nsMalInputs[item.Referencia] = e.Value?.ToString() ?? string.Empty"
                                        class="form-control"
                                        rows="@(Math.Max(2, (item.Mal ?? 0) / 3))"
                                        placeholder="Separe con comas o saltos de línea">
                                        </textarea>
                                    </div>
                                }

                                @if (erroresNSerie.TryGetValue(item.Referencia, out var error))
                                {
                                    <div class="text-danger small">@error</div>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <button class="btn btn-success" @onclick="GuardarLineas">Guardar Líneas</button>
        <button class="btn btn-secondary ms-1" @onclick="ClearCarrito">Limpiar carrito</button>
    }


    <h4 class="mt-4">Catálogo de Referencias</h4>
    @if (referencias == null)
    {
        <p>Cargando referencias...</p>
    }
    else
    {
        <div style="max-height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px;">
            @foreach (var refe in referencias)
            {
                <div class="d-flex justify-content-between align-items-center mb-2 p-2 border-bottom">
                    <div>
                        <strong>@refe.Referencia</strong><br />
                        <small>@refe.DesReferencia</small>
                    </div>
                    <button class="btn btn-sm btn-primary"
                    @onclick="() => AddToCarrito(refe)">
                        <i class="bi bi-cart-plus"></i>
                    </button>
                </div>
            }
        </div>
    }
}

@code {
    private Referencias[]? referencias;
    private Dictionary<string, string> nsBienInputs = new();
    private Dictionary<string, string> nsMalInputs = new();
    private Dictionary<string, string> erroresNSerie = new();

    [Parameter][SupplyParameterFromQuery] public string? albaran { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(albaran) && int.TryParse(albaran, out int albaranId))
        {
            RecepcionService.SetCurrentAlbaran(albaranId);

        }   

        referencias = await Http.GetFromJsonAsync<Referencias[]>("api/Referencias");
    }
    private void AddToCarrito(Referencias refe)
    {
        RecepcionService.AddOrIncrement(
            refe.Referencia,
            refe.DesReferencia,
            refe.NSerie == true,
            refe.LongNSerie
        );
    }

    private void RemoveFromCarrito(string referencia)
    {
        RecepcionService.Remove(referencia);
    }

    private void ClearCarrito()
    {
        RecepcionService.Clear();
    }

    private async Task GuardarLineas()
    {
        // Limpiar errores previos
        erroresNSerie.Clear();

        // Validar y procesar números de serie si la referencia los requiere
        foreach (var item in RecepcionService.Carrito.Values.ToList())
        {
            if (item.RequiereNSerie)
            {
                var bienInput = nsBienInputs.GetValueOrDefault(item.Referencia, "");
                var malInput = nsMalInputs.GetValueOrDefault(item.Referencia, "");

                var bienList = ParseNSeries(bienInput);
                var malList = ParseNSeries(malInput);
                // Dentro de GuardarLineas, tras ParseNSeries:
                if (item.RequiereNSerie && item.LongNSerie.HasValue)
                {
                    var longitudEsperada = item.LongNSerie.Value;

                    foreach (var nserie in bienList)
                    {
                        if (nserie.Length != longitudEsperada)
                        {
                            erroresNSerie[item.Referencia] = $"Los números de serie para 'Bien' deben tener exactamente {longitudEsperada} caracteres. '{nserie}' tiene {nserie.Length}.";
                            StateHasChanged();
                            return;
                        }
                    }

                    foreach (var nserie in malList)
                    {
                        if (nserie.Length != longitudEsperada)
                        {
                            erroresNSerie[item.Referencia] = $"Los números de serie para 'Mal' deben tener exactamente {longitudEsperada} caracteres. '{nserie}' tiene {nserie.Length}.";
                            StateHasChanged();
                            return;
                        }
                    }
                }

                // Validar cantidad de NSeries para Bien
                if (item.Bien.HasValue && item.Bien > 0)
                {
                    if (bienList.Count != item.Bien)
                    {
                        erroresNSerie[item.Referencia] = $"Debe introducir exactamente {item.Bien} número(s) de serie para 'Bien'.";
                        StateHasChanged();
                        return;
                    }
                }
                else
                {
                    bienList = new List<string>();
                }

                // Validar cantidad de NSeries para Mal
                if (item.Mal.HasValue && item.Mal > 0)
                {
                    if (malList.Count != item.Mal)
                    {
                        erroresNSerie[item.Referencia] = $"Debe introducir exactamente {item.Mal} número(s) de serie para 'Mal'.";
                        StateHasChanged();
                        return;
                    }
                }
                else
                {
                    malList = new List<string>();
                }

                // Asignar las listas al DTO
                item.NumerosSerieBien = bienList;
                item.NumerosSerieMal = malList;
            }
        }

        try
        {
            var lineas = RecepcionService.ToLineasDto();
            if (!lineas.Any()) return;

            // Guardar líneas en la API
            await Http.PostAsJsonAsync("api/RecepcionesLin", lineas);

            // Actualizar estado de la cabecera
            var albaranId = RecepcionService.CurrentAlbaran.Value;
            var cab = await Http.GetFromJsonAsync<RecepcionesCab>($"api/RecepcionesCab/{albaranId}");
            if (cab != null)
            {
                cab.Estado = 2;
                cab.DesEstado = "Recepcionado";
                await Http.PutAsJsonAsync($"api/RecepcionesCab/{albaranId}", cab);
            }

            await JSRuntime.InvokeVoidAsync("alert", "Líneas guardadas y estado actualizado.");
            RecepcionService.Clear();
            Nav.NavigateTo("/recepciones");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
    }
    private List<string> ParseNSeries(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return new List<string>();

        return input
            .Split(new[] { "\r\n", "\n", "," },
                   StringSplitOptions.RemoveEmptyEntries)
            .Select(s => s.Trim())
            .Where(s => !string.IsNullOrEmpty(s))
            .ToList();
    }
}
