@page "/recepcioneslin"
@using UltimateProyect.Shared.Models
@using UltimateProyect.Client.Services
@inject HttpClient Http
@inject RecepcionService RecepcionService
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime

<h3>Seleccionar Referencias - Albarán @RecepcionService.CurrentAlbaran</h3>

@if (!RecepcionService.CurrentAlbaran.HasValue)
{
    <div class="alert alert-warning">
        Seleccione un albarán desde la lista de recepciones.
    </div>
}
else
{
    @if (RecepcionService.Carrito.Any())
    {
        <h4>Carrito (@RecepcionService.Carrito.Values.Sum(x => x.Cantidad) unidades)</h4>
        <table class="table table-sm table-bordered">
            <thead>
                <tr>
                    <th>Referencia</th>
                    <th>Descripción</th>
                    <th>Cantidad</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in RecepcionService.Carrito.Values)
                {
                    <tr>
                        <td>@item.Referencia</td>
                        <td>@item.DesReferencia</td>
                        <td>
                            <InputNumber @bind-Value="item.Cantidad" class="form-control form-control-sm" min="1" />
                        </td>
                        <td>
                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveFromCarrito(item.Referencia)">
                                Eliminar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-success" @onclick="GuardarLineas">Guardar Recepción</button>
        <button class="btn btn-secondary ms-1" @onclick="ClearCarrito">Limpiar carrito</button>
    }

    <h4 class="mt-4">Catálogo de Referencias</h4>
    @if (referencias == null)
    {
        <p>Cargando referencias...</p>
    }
    else
    {
        <div style="max-height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px;">
            @foreach (var refe in referencias)
            {
                <div class="d-flex justify-content-between align-items-center mb-2 p-2 border-bottom">
                    <div>
                        <strong>@refe.Referencia</strong><br />
                        <small>@refe.DesReferencia</small>
                    </div>
                    <button class="btn btn-sm btn-primary" @onclick="() => AddToCarrito(refe)">
                        <i class="bi bi-cart-plus"></i>
                    </button>
                </div>
            }
        </div>
    }
}

@code {
    private Referencias[]? referencias;

    [Parameter][SupplyParameterFromQuery] public string? albaran { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(albaran) && int.TryParse(albaran, out int albaranId))
        {
            RecepcionService.SetCurrentAlbaran(albaranId);
        }

        referencias = await Http.GetFromJsonAsync<Referencias[]>("api/Referencias");
    }

    private void AddToCarrito(Referencias refe)
    {
        RecepcionService.AddOrIncrement(
            refe.Referencia,
            refe.DesReferencia,
            requiereNSerie: false, // ❌ No se usa aquí
            longNSerie: null,
            cantidad: 1,
            bien: 0,
            mal: 0
        );
    }

    private void RemoveFromCarrito(string referencia) => RecepcionService.Remove(referencia);
    private void ClearCarrito() => RecepcionService.Clear();

    private async Task GuardarLineas()
    {
        try
        {
            var lineas = RecepcionService.ToLineasDto();
            if (!lineas.Any()) return;

            await Http.PostAsJsonAsync("api/RecepcionesLin", lineas);
            await JSRuntime.InvokeVoidAsync("alert", "Recepción guardada correctamente.");
            RecepcionService.Clear();
            Nav.NavigateTo("/recepciones");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
    }
}